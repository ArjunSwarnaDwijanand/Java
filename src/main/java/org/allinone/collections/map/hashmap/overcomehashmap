Question: How does HashMap handle collisions in Java?

Answer: HashMap in Java uses a technique called chaining to handle collisions. When two keys hash to the same bucket, they are stored in a linked list at that bucket. In Java 8 and later, if the number of items in a bucket exceeds a certain threshold, the linked list is converted to a balanced tree to improve performance.

Question: What happens when the HashMap's capacity is exceeded?

Answer: When the number of entries in the HashMap exceeds the product of the load factor and the current capacity, the HashMap is resized. The capacity is doubled, and all existing entries are rehashed to the new buckets.
Question: Can we use mutable objects as keys in a HashMap?

Answer: It is not recommended to use mutable objects as keys in a HashMap because if the key object is modified after it is inserted into the map, it can lead to unpredictable behavior. The hashCode and equals methods may no longer work correctly, causing issues with retrieval and storage.
Question: How does HashMap ensure thread safety?

Answer: HashMap is not thread-safe. If multiple threads access a HashMap concurrently and at least one of the threads modifies the map structurally, it must be synchronized externally. For thread-safe operations, you can use Collections.synchronizedMap or ConcurrentHashMap.
Question: What is the difference between HashMap and Hashtable?

Answer:
HashMap is not synchronized, while Hashtable is synchronized.
HashMap allows one null key and multiple null values, whereas Hashtable does not allow any null key or value.
HashMap is generally preferred over Hashtable in single-threaded applications due to better performance.
Question: How does HashMap's get method work internally?

Answer: The get method in HashMap works as follows:
It calculates the hash code of the key and determines the bucket location.
It traverses the linked list (or tree) at that bucket to find the entry with the matching key.
If the key is found, it returns the associated value; otherwise, it returns null.

Question: What is the time complexity of basic operations in a HashMap?
Answer: The average time complexity for basic operations (get, put, remove) in a HashMap is O(1). However, in the worst case, when many collisions occur, the time complexity can degrade to O(n), where n is the number of entries in the map.