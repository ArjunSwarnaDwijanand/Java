How many types of exception can occur in a Java program?

There are two types of exceptions in Java:

1. Checked Exception
2. Unchecked Exception

What is a Checked Exception in Java?

Checked exceptions are the exceptions that are checked at compile time. If a method is throwing a checked exception, then it should handle the exception using a try-catch block or it should declare the exception using the throws keyword, otherwise, the program will give a compilation error. For example, IOException, SQLException, etc.

What is an Unchecked Exception in Java?

Unchecked exceptions are the exceptions that are not checked at compile time. It is up to the programmer to write the code to handle the exception. For example, ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc.

what is an Error?

Errors are the exceptions that are not handled by the programmer. Errors are generated to indicate errors generated by the runtime environment. For example, OutOfMemoryError, StackOverflowError, etc.

What is Exception Handling?

Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, IOException, SQLException, RemoteException, etc. It is mainly used to handle checked exceptions.

What are the keywords used in Exception Handling?

The keywords used in Exception Handling are:

1. try
2. catch
3. finally
4. throw
5. throws

Explain the hierarchy of Java Exception classes?

The hierarchy of Java Exception classes is given below:

Throwable
    Error
        VirtualMachineError
            StackOverflowError
            OutOfMemoryError
        AssertionError
        LinkageError
            ExceptionInInitializerError
        AWTError
        IOError
    Exception
        RuntimeException
            ArithmeticException
            NullPointerException
            ArrayIndexOutOfBoundsException
            ClassCastException
            IllegalArgumentException
            NumberFormatException
            SecurityException
            UnsupportedOperationException
        IOException
            EOFException
            FileNotFoundException
            InterruptedIOException
            MalformedURLException
            ProtocolException
            SocketException
            UnknownHostException
            UnknownServiceException
        SQLException
            BatchUpdateException
            DataTruncation
            SQLWarning
        ClassNotFoundException
        CloneNotSupportedException
        IllegalAccessException
        InstantiationException
        InterruptedException
        NoSuchFieldException
        NoSuchMethodException
        ReflectiveOperationException
            InvocationTargetException
        RuntimeException
            ArithmeticException
            ArrayStoreException
            ClassCastException
            ConcurrentModificationException
            EmptyStackException
            IllegalArgumentException
            IllegalMonitorStateException
            IllegalStateException
            IndexOutOfBoundsException
            NegativeArraySizeException
            NoSuchElementException
            NullPointerException
            SecurityException
            TypeNotPresentException
            UnsupportedOperationException
        SecurityException
        TypeNotPresentException
        UnsupportedOperationException
    RemoteException
    RuntimeException
    SQLException
    ClassNotFoundException
    CloneNotSupportedException
    IllegalAccessException
    InstantiationException
    InterruptedException
    NoSuchFieldException
    NoSuchMethodException
    ReflectiveOperationException
        InvocationTargetException
    RuntimeException
    SecurityException
    TypeNotPresentException
    UnsupportedOperationException


    What is the base class for Error and Exception?

    The base class for Error and Exception is Throwable.

    Is it necessary that each try block must be followed by a catch block?

    It is not necessary that each try block must be followed by a catch block. It should be followed by either a catch block or a finally block.

    Can finally block be used without a catch?

    Yes, finally block can be used without a catch block.

    Is there any case when finally will not be executed?

    Yes, there are two cases when finally will not be executed:

    1. In case of System.exit(0)
    2. In case of an infinite loop

    What is the difference between throw and throws?

    The difference between throw and throws is given below:

    throw
    throws
    1. throw is used to explicitly throw an exception.
    1. throws is used to declare an exception.
    2. throw is followed by an instance.
    2. throws is followed by class.
    3. throw is used within the method.
    3. throws is used with the method signature.
    4. throw is used to throw only one exception at a time.
    4. throws is used to declare multiple exceptions.
    5. throw is used to throw checked and unchecked exceptions.
    5. throws is used to declare checked exceptions.

    Can an exception be rethrown?

    Yes, an exception can be rethrown.

    example:

    public class Main {
        public static void main(String[] args) {
            try {
                throw new ArithmeticException("Arithmetic Exception");
            } catch (ArithmeticException e) {
                System.out.println("Arithmetic Exception is caught");
                throw e; // rethrowing the exception
            }
        }
    }

// https://www.javatpoint.com/exception-handling-with-method-overriding
Can subclass overriding method declare an exception if parent class method doesn't throw an exception?

No, if the parent class method doesn't throw an exception, then the subclass overriding method cannot declare the checked exception but it can declare unchecked exceptions.

example:

class Parent {
    void msg() {
        System.out.println("parent");
    }
}

class TestExceptionChild extends Parent {
    void msg() throws ArithmeticException {
        System.out.println("child");
    }

    public static void main(String[] args) {
        Parent p = new TestExceptionChild();
        p.msg();
    }
}

In the above example, the parent class method doesn't throw an exception. The subclass overriding method throws an ArithmeticException. The compiler will give an error because the parent class method doesn't throw an exception.

Can subclass overriding method declare an exception if parent class method throws an exception?

Yes, if the parent class method throws an exception, then the subclass overriding method can declare the same, subclass exception or no exception but cannot declare the parent exception.

example:

class Parent {
    void msg() throws Exception {
        System.out.println("parent");
    }
}

class TestExceptionChild extends Parent {
    void msg() throws ArithmeticException {
        System.out.println("child");
    }

    public static void main(String[] args) {
        Parent p = new TestExceptionChild();
        p.msg();
    }
}

In the above example, the parent class method throws an exception. The subclass overriding method throws an ArithmeticException. The compiler will not give an error because the ArithmeticException is a subclass of Exception.


What is exception propagation?

Exception propagation is a process in which the exception is being transferred from one method to another. If an exception occurs in a method, the method creates an exception object and passes it to the runtime system. The exception object is passed to the immediate caller method. If the caller method doesn't catch the exception, the exception object is passed to the next method in the call stack. This process continues until the exception object is caught or until it reaches the top of the call stack.
example:

public class Main {
    public static void main(String[] args) {
        try {
            m1();
        } catch (Exception e) {
            System.out.println("Exception handled");
        }
    }

    static void m1() {
        m2();
    }

    static void m2() {
        m3();
    }

    static void m3() {
        int a = 50 / 0;
    }
}

In the above example, the exception occurs in the m3() method. The m3() method creates an exception object and passes it to the m2() method. The m2() method passes the exception object to the m1() method. The m1() method catches the exception and handles it.





