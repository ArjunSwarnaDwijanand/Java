what is object and class in java?

Object: Object is an instance of a class. An object has states and behaviors. For example, a dog has states - color, name, breed as well as behaviors â€“ wagging the tail, barking, eating. An object is created using the 'new' keyword.

Object example
Dog myDog = new Dog();

Here, myDog is an object of Dog class.


Class: A class is a blueprint from which objects are created. A class can contain fields and methods to describe the behavior of an object.

Class example
public class Dog {
    String breed;
    String color;
    String name;

    void barking() {
    }

    void hungry() {
    }

    void sleeping() {
    }
}


OOPs in java is a concept of Object-Oriented Programming System. It is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, hiding, polymorphism, etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.

OOPs in Java is a concept that is used to create a program using classes and objects. It is a way to structure a program by bundling related properties and behaviors into individual objects. In this tutorial, we will learn about the basic concepts of OOPs in Java.

OOPs Concepts in Java

There are four main OOPs concepts in Java. They are:

- Abstraction
- Encapsulation
- Inheritance
- Polymorphism

Abstraction

Abstraction is the process of hiding the implementation details and showing only the functionality to the user. In other words, it shows only essential things to the user and hides the internal details. For example, sending an SMS where you type the text and send the message. You don't know the internal processing of how the message is sent.

Abstraction can be achieved in two ways:

- Abstract class (0 to 100%)
- Interface (100%)

Abstract class
An abstract class is a class that is declared with the abstract keyword. It can have abstract and non-abstract methods. It cannot be instantiated, which means you cannot create an object of an abstract class.

public abstract class Shape {
    abstract void draw();
}

class Rectangle extends Shape {
    void draw() {
        System.out.println("drawing rectangle");
    }
}

class Circle extends Shape {
    void draw() {
        System.out.println("drawing circle");
    }
}

Can there be an abstract method without an abstract class?

No, an abstract method cannot exist without an abstract class in Java. An abstract method is a method that is declared without an implementation. It is meant to be implemented by subclasses. An abstract class is a class that is declared with the abstract keyword and can have abstract methods.

example of abstract method without abstract class

abstract void display();

In the above example, the display() method is declared as abstract, but there is no abstract class to contain it. This will result in a compile-time error because an abstract method cannot exist without an abstract class.

 Can you use abstract and final both with a method?

No, we cannot use abstract and final together with a method in Java. The abstract keyword is used to declare an abstract method, which must be implemented by subclasses. The final keyword is used to restrict the user from overriding the method in subclasses. Since abstract methods are meant to be implemented by subclasses, it does not make sense to declare them as final.

abstract final void display();

In the above example, the display() method is declared as abstract and final, which is not allowed in Java. This will result in a compile-time error because an abstract method cannot be declared as final.

Is it possible to instantiate the abstract class?

No, it is not possible to instantiate an abstract class in Java. An abstract class is a class that is declared with the abstract keyword and cannot be instantiated, which means you cannot create an object of an abstract class.

abstract class Example {
    // code
}

class Main {
    public static void main(String[] args) {
        Example obj = new Example(); // compile-time error
    }
}

In the above example, the Example class is declared as abstract, so it cannot be instantiated. If you try to create an object of the Example class, it will result in a compile-time error.


Interface
An interface is a reference type in Java. It is similar to a class. It is a collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface.

interface Drawable {
    void draw();
}

class Rectangle implements Drawable {
    public void draw() {
        System.out.println("drawing rectangle");
    }
}

class Circle implements Drawable {
    public void draw() {
        System.out.println("drawing circle");
    }
}

 Can the Interface be final?

No, an interface cannot be declared as final in Java. The final keyword is used to restrict the user from subclassing a class or overriding a method. Since interfaces are meant to be implemented by classes, it does not make sense to declare them as final.

final interface Drawable {
    void draw();
}

In the above example, the Drawable interface is declared as final, which is not allowed in Java. This will result in a compile-time error because an interface cannot be declared as final.

 Can the Interface be static?

Yes, an interface can be declared as static in Java. The static keyword is used to define a static nested interface within a class. A static nested interface is a static member of the enclosing class and can be accessed without instantiating the class.

class Example {
    static interface Drawable {
        void draw();
    }
}

In the above example, the Drawable interface is declared as static within the Example class. This allows the Drawable interface to be accessed without instantiating the Example class.

 Can the Interface be private?

No, an interface cannot be declared as private in Java. The private keyword is used to restrict access to members of a class. Since interfaces are meant to be implemented by classes, it does not make sense to declare them as private.

private interface Drawable {
    void draw();
}

In the above example, the Drawable interface is declared as private, which is not allowed in Java. This will result in a compile-time error because an interface cannot be declared as private.


Encapsulation

Encapsulation is the process of wrapping code and data together into a single unit. It prevents access to the data directly and can only be accessed through the methods present in that class. Encapsulation can be achieved by using access specifiers like private, protected, and public.

public class EncapsulationDemo {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

class Main {
    public static void main(String[] args) {
        EncapsulationDemo obj = new EncapsulationDemo();
        obj.setName("John");
        System.out.println(obj.getName());
    }
}

What are the advantages of Encapsulation in Java?

Encapsulation has several advantages in Java. Some of the key advantages are:

- Data hiding: Encapsulation allows you to hide the internal details of a class and only expose the necessary information to the outside world. This helps in preventing unauthorized access to the data.
- Code reusability: Encapsulation allows you to reuse the code by creating reusable components that can be used in different parts of the program.
- Modularity: Encapsulation helps in creating modular code by grouping related data and methods together in a single unit.
- Maintainability: Encapsulation makes it easier to maintain and update the code by providing a clear separation between the internal implementation and the external interface.
- Security: Encapsulation helps in improving the security of the code by preventing direct access to the data and providing controlled access through methods.


Inheritance

Inheritance is a mechanism in which one object acquires all the properties and behaviors of a parent object. It represents the IS-A relationship. It is used for code reusability and method overriding.

class Animal {
    void eat() {
        System.out.println("eating...");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("barking...");
    }
}

class TestInheritance {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.bark();
        d.eat();
    }
}

Types of Inheritance

- Single Inheritance: In single inheritance, one class inherits the properties of another class.
- Multilevel Inheritance: In multilevel inheritance, a class is derived from a class that is also derived from another class.
- Hierarchical Inheritance: In hierarchical inheritance, one class serves as a superclass for more than one subclass.
- Multiple Inheritance: In multiple inheritance, one class can have more than one superclass.


Why is multiple inheritance not supported in java?

Java does not support multiple inheritance because it leads to the diamond problem. The diamond problem occurs when a class inherits from two classes that have a common superclass. This leads to ambiguity as to which superclass method should be called.

class A {
    void msg() {
        System.out.println("Hello");
    }
}

class B {
    void msg() {
        System.out.println("Welcome");
    }
}

class C extends A, B {
    public static void main(String[] args) {
        C obj = new C();
        obj.msg();
    }
}

Output: Compile-time error

Java does not support multiple inheritance. It is supported through interfaces.

class A {
    void msg() {
        System.out.println("Hello");
    }
}

interface B {
    void msg();
}

class C extends A implements B {
    public static void main(String[] args) {
        C obj = new C();
        obj.msg();
    }
}

Output: Hello

Polymorphism

Polymorphism is the ability of a single function to perform different tasks. It allows methods to do different things based on the object that it is acting upon. There are two types of polymorphism:

- Compile-time polymorphism (Method Overloading)
- Runtime polymorphism (Method Overriding)

Compile-time polymorphism (Method Overloading)
Method overloading is a feature that allows a class to have more than one method having the same name if their argument lists are different.

class Adder {
    static int add(int a, int b) {
        return a + b;
    }

    static int add(int a, int b, int c) {
        return a + b + c;
    }
}

class TestOverloading {
    public static void main(String[] args) {
        System.out.println(Adder.add(11, 11));
        System.out.println(Adder.add(11, 11, 11));
    }
}

Runtime polymorphism (Method Overriding)
Method overriding is a feature that allows a subclass to provide a specific implementation of a method that is already provided by its superclass.

class Animal {
    void eat() {
        System.out.println("eating...");
    }
}

class Dog extends Animal {
    void eat() {
        System.out.println("eating bread...");
    }
}

class TestOverriding {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.eat();
    }
}


Advantages of OOPs in Java

- OOPs makes the development and maintenance easier.
- It provides a clear modular structure for programs.
- It is good for defining abstract data types.
- It implements real-world entities like inheritance, hiding, polymorphism, etc.
- It provides a simple way to solve complex problems.

Disadvantages of OOPs in Java

- It is not suitable for small programs.
- It is not suitable for low-level programming.
- It is not suitable for procedural tasks.

aggregation vs composition vs association in java

Aggregation
Aggregation is a special form of association. It is a relationship between two classes where one class contains the other class as a part of its own structure. It represents a "has-a" relationship.

class Address {
    String city, state, country;

    public Address(String city, String state, String country) {
        this.city = city;
        this.state = state;
        this.country = country;
    }
}

class Employee {
    int id;
    String name;
    Address address;

    public Employee(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    void display() {
        System.out.println(id + " " + name);
        System.out.println(address.city + " " + address.state + " " + address.country);
    }

    public static void main(String[] args) {
        Address address1 = new Address("Gurgaon", "Haryana", "India");
        Address address2 = new Address("Bangalore", "Karnataka", "India");

        Employee e1 = new Employee(111, "John", address1);
        Employee e2 = new Employee(112, "David", address2);

        e1.display();
        e2.display();
    }
}

Composition
Composition is a special form of aggregation. It is a relationship between two classes where one class contains the other class as a part of its own structure. It represents a "whole-part" relationship.

class Engine {
    String type;

    public Engine(String type) {
        this.type = type;
    }
}

class Car {
    int id;
    String name;
    Engine engine;

    public Car(int id, String name, Engine engine) {
        this.id = id;
        this.name = name;
        this.engine = engine;
    }

    void display() {
        System.out.println(id + " " + name);
        System.out.println(engine.type);
    }

    public static void main(String[] args) {
        Engine engine = new Engine("V8");
        Car car = new Car(1, "Audi", engine);
        car.display();
    }
}

Association
Association is a relationship between two classes. It represents the "is-a" relationship. It can be one-to-one, one-to-many, many-to-one, and many-to-many.

class Bank {
    String name;

    public Bank(String name) {
        this.name = name;
    }
}

class Employee {
    int id;
    String name;
    Bank bank;

    public Employee(int id, String name, Bank bank) {
        this.id = id;
        this.name = name;
        this.bank = bank;
    }

    void display() {
        System.out.println(id + " " + name);
        System.out.println(bank.name);
    }

    public static void main(String[] args) {
        Bank bank = new Bank("HDFC");
        Employee employee = new Employee(1, "John", bank);
        employee.display();
    }
}

Association vs Aggregation vs Composition

- Association is a relationship between two classes. It represents the "is-a" relationship.
- Aggregation is a special form of association. It is a relationship between two classes where one class contains the other class as a part of its own structure. It represents a "has-a" relationship.
- Composition is a special form of aggregation. It is a relationship between two classes where one class contains the other class as a part of its own structure. It represents a "whole-part" relationship.

Association, aggregation, and composition are three types of relationships in object-oriented programming. They define how objects are related to each other and how they interact with each other.

Why does Java not support pointers?

Java does not support pointers because they are unsafe and can lead to security vulnerabilities. Pointers allow direct memory manipulation, which can lead to memory leaks, buffer overflows, and other security issues. Java uses references instead of pointers to access objects in memory. References are safer and more secure than pointers because they are managed by the Java Virtual Machine (JVM) and provide automatic memory management through garbage collection.
Java uses references to access objects in memory. References are similar to pointers in that they store the memory address of an object, but they are safer and more secure than pointers. References are managed by the JVM and provide automatic memory management through garbage collection. This makes Java programs more robust and secure compared to languages that use pointers.

What is object cloning?

Object cloning is the process of creating an exact copy of an object. In Java, object cloning is achieved using the clone() method. The clone() method is defined in the Cloneable interface, which is a marker interface that indicates that the class can be cloned.

class Employee implements Cloneable {
    int id;
    String name;

    public Employee(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    public static void main(String[] args) {
        try {
            Employee e1 = new Employee(1, "John");
            Employee e2 = (Employee) e1.clone();

            System.out.println(e1.id + " " + e1.name);
            System.out.println(e2.id + " " + e2.name);
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
    }
}

In the above example, the Employee class implements the Cloneable interface and overrides the clone() method to create a copy of the object. The clone() method returns an Object, so it needs to be cast to the appropriate type.

Why is method overloading not possible by changing the return type in java?

Method overloading is not possible by changing the return type in Java because the return type alone is not sufficient to distinguish between two overloaded methods. Method overloading is based on the number and type of parameters passed to the method, not the return type.

class OverloadingExample {
    void sum(int a, int b) {
        System.out.println(a + b);
    }

    float sum(int a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        OverloadingExample obj = new OverloadingExample();
        obj.sum(10, 20);
    }
}

Output: Compile-time error

In the above example, the sum() method is overloaded with two versions - one that takes two int parameters and one that takes two int parameters and returns a float. This will result in a compile-time error because the return type alone is not sufficient to distinguish between the two overloaded methods.

Can we override the overloaded method?

Yes, we can override the overloaded method in Java. Method overriding is a feature that allows a subclass to provide a specific implementation of a method that is already provided by its superclass. Overloaded methods are different methods with the same name but different parameters, while overridden methods are methods with the same name and parameters in the superclass and subclass.

class Animal {
    void eat() {
        System.out.println("eating...");
    }
}

class Dog extends Animal {
    void eat() {
        System.out.println("eating bread...");
    }
}

class TestOverriding {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.eat();
    }
}

In the above example, the eat() method in the Animal class is overridden in the Dog class. The Dog class provides a specific implementation of the eat() method that is different from the implementation in the Animal class.

Can we override the private methods?

No, we cannot override private methods in Java. Private methods are not visible to subclasses, so they cannot be overridden. Private methods are used to encapsulate code within a class and are not meant to be accessed or overridden by subclasses.

class Animal {
    private void eat() {
        System.out.println("eating...");
    }
}

class Dog extends Animal {
    private void eat() {
        System.out.println("eating bread...");
    }
}

In the above example, the eat() method in the Animal class is private, so it cannot be accessed or overridden by the Dog class. This will result in a compile-time error.

Can we modify the throws clause of the superclass method while overriding it in the subclass?

No, we cannot modify the throws clause of the superclass method while overriding it in the subclass. The throws clause of an overridden method in a subclass must be the same as or a subclass of the throws clause of the superclass method. This is known as the "rule of exception handling" in Java.

class Parent {
    void display() throws IOException {
        System.out.println("Parent");
    }
}

class Child extends Parent {
    void display() throws Exception {
        System.out.println("Child");
    }
}

In the above example, the display() method in the Parent class throws an IOException, while the display() method in the Child class throws an Exception. This will result in a compile-time error because the throws clause in the Child class is not compatible with the throws clause in the Parent class.

If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception, but it can declare the unchecked exception.

class Parent {
    void display() {
        System.out.println("Parent");
    }
}

class Child extends Parent {
    void display() throws RuntimeException {
        System.out.println("Child");
    }
}

In the above example, the display() method in the Parent class does not declare an exception, so the display() method in the Child class cannot declare a checked exception. However, it can declare an unchecked exception like RuntimeException.

If the superclass method declares an exception, subclass overridden method can declare same, subclass exception or no exception but cannot declare parent exception.

class Parent {
    void display() throws IOException {
        System.out.println("Parent");
    }
}

class Child extends Parent {
    void display() throws IOException {
        System.out.println("Child");
    }
}

In the above example, the display() method in the Parent class declares an IOException, so the display() method in the Child class can declare the same exception, a subclass exception, or no exception. It cannot declare a parent exception.

What is covariant return type?

Covariant return type allows a subclass to override a method in the superclass with a return type that is a subclass of the return type in the superclass method. It was introduced in Java 5.

class A {
    A get() {
        return this;
    }
}

class B extends A {
    B get() {
        return this;
    }

    void message() {
        System.out.println("welcome to covariant return type");
    }

    public static void main(String[] args) {
        new B().get().message();
    }
}

In the above example, the get() method in the B class overrides the get() method in the A class with a return type of B. This is an example of covariant return type. The B class can return an object of type B, which is a subclass of the return type in the A class.


What is the difference between static and dynamic binding in Java?

Static binding and dynamic binding are two types of binding in Java. Binding refers to the process of associating a method call with the method implementation. The main difference between static and dynamic binding is when the binding occurs.

Static binding
Static binding is also known as early binding. It occurs at compile time and is based on the type of the reference variable. It is used for method overloading and static methods.

class Animal {
    void eat() {
        System.out.println("eating...");
    }
}

class Dog extends Animal {
    void eat() {
        System.out.println("eating bread...");
    }

    public static void main(String[] args) {
        Animal a = new Dog();
        a.eat(); // static binding
    }
}

In the above example, the eat() method is called using a reference variable of type Animal. The method call is resolved at compile time based on the type of the reference variable, so it is an example of static binding.

Dynamic binding
Dynamic binding is also known as late binding. It occurs at runtime and is based on the type of the object. It is used for method overriding and non-static methods.

class Animal {
    void eat() {
        System.out.println("eating...");
    }
}

class Dog extends Animal {
    void eat() {
        System.out.println("eating bread...");
    }

    public static void main(String[] args) {
        Animal a = new Dog();
        a.eat(); // dynamic binding
    }
}


In the above example, the eat() method is called using a reference variable of type Animal, but the object is of type Dog. The method call is resolved at runtime based on the type of the object, so it is an example of dynamic binding.

difference between final, finally, and finalize in java?

final
final is a keyword in Java that is used to restrict the user. The final keyword can be used with variables, methods, and classes.

- final variable: A final variable cannot be changed once it is initialized. It acts like a constant.
- final method: A final method cannot be overridden by subclasses.
- final class: A final class cannot be subclassed.

final variable example
final int value = 10;

class Example {
    final int value = 10;

    final void display() {
        System.out.println("final method");
    }
}

final method example
class Example {
    final void display() {
        System.out.println("final method");
    }
}

class Subclass extends Example {
    void display() {
        System.out.println("cannot override final method");
    }
}

final class example

final class Example {
    // code
}

class Subclass extends Example {
    // compile-time error
}

In the above example, the Example class is declared as final, so it cannot be subclassed. If you try to subclass the Example class, it will result in a compile-time error.


finally
finally is a block in Java that is used to execute important code such as closing a connection, releasing resources, etc. The finally block is always executed whether an exception is thrown or not.

try {
    // code that may throw an exception
} catch (Exception e) {
    // exception handling code
} finally {
    // code that will always be executed
}

finalize
finalize is a method in Java that is called by the garbage collector before an object is destroyed. It is used to perform cleanup operations such as closing a connection, releasing resources, etc.

class Example {
    public void finalize() {
        // cleanup code
    }
}

In the above example, the finalize() method is called by the garbage collector before the object is destroyed. It is used to perform cleanup operations such as closing a connection, releasing resources, etc.

 Can you declare the main method as final?

Yes, We can declare the main method as public static final void main(String[] args){}. The final keyword is used to restrict the user. The final keyword can be used with variables, methods, and classes. When the main method is declared as final, it cannot be overridden by subclasses.

 Can we declare an interface as final?

No, we cannot declare an interface as final in Java. The final keyword is used to restrict the user. The final keyword can be used with variables, methods, and classes, but not with interfaces. Interfaces are meant to be implemented by classes, so they cannot be declared as final.

     Can we declare a constructor as final?

No, we cannot declare a constructor as final in Java. The final keyword is used to restrict the user. The final keyword can be used with variables, methods, and classes, but not with constructors. Constructors are used to create objects of a class, so they cannot be declared as final.

What is the difference between the final method and abstract method?

final method
- A final method is a method that cannot be overridden by subclasses.
- It is used to prevent subclasses from changing the behavior of the method.
- It is declared using the final keyword.

abstract method
- An abstract method is a method that does not have a body and must be implemented by subclasses.
- It is used to define a method signature without providing an implementation.
- It is declared using the abstract keyword.

final method example
class Example {
    final void display() {
        System.out.println("final method");
    }
}

abstract method example
abstract class Example {
    abstract void display();
}

In the above example, the display() method in the Example class is declared as final, so it cannot be overridden by subclasses. The display() method in the abstract Example class is declared as abstract, so it must be implemented by subclasses.

Can you achieve Runtime Polymorphism by data members?

No, we cannot achieve Runtime Polymorphism by data members in Java. Runtime polymorphism is achieved by method overriding, not by data members. Data members are not polymorphic in Java, as they are not overridden in subclasses.

class Animal {
    String color = "white";
}

class Dog extends Animal {
    String color = "black";

    public static void main(String[] args) {
        Animal a = new Dog();
        System.out.println(a.color); // white
    }
}

In the above example, the color data member in the Animal class is not overridden in the Dog class. When an object of type Dog is assigned to a reference variable of type Animal, the color data member of the Animal class is accessed, not the color data member of the Dog class.

What is Java instanceOf operator?

The instanceof operator in Java is used to test if an object is an instance of a particular class or interface. It returns true if the object is an instance of the specified class or interface, or a subclass of the specified class or interface. Otherwise, it returns false.

class Animal {
}

class Dog extends Animal {
}

class InstanceOfExample {
    public static void main(String[] args) {
        Animal a = new Dog();
        System.out.println(a instanceof Animal); // true
        System.out.println(a instanceof Dog); // true
    }
}

What is a marker interface?

A marker interface is an interface that does not have any methods or fields. It is used to mark a class as having a certain property or behavior. Marker interfaces are also known as tag interfaces or flag interfaces.

Marker interfaces are used to provide metadata about a class. They are used to indicate that a class has a certain property or behavior. Some common examples of marker interfaces in Java are: Serializable, Cloneable, and Remote.

Serializable interface
The Serializable interface is a marker interface that indicates that a class can be serialized. Serialization is the process of converting an object into a byte stream that can be stored in a file or sent over a network.

class Example implements Serializable {
    // code
}

Cloneable interface
The Cloneable interface is a marker interface that indicates that a class can be cloned. Cloning is the process of creating an exact copy of an object.

class Example implements Cloneable {
    // code
}

Remote interface
The Remote interface is a marker interface that indicates that a class can be accessed remotely. It is used in Java Remote Method Invocation (RMI) to enable communication between distributed objects.

class Example implements Remote {
    // code
}

Marker interfaces are used to provide metadata about a class. They are used to indicate that a class has a certain property or behavior. Marker interfaces do not have any methods or fields, but they are used to mark a class as having a certain property or behavior.

Can we define private and protected modifiers for the members in interfaces?
 All members of an interface are public by default. The private and protected modifiers are not allowed for members of an interface.

 When can an object reference be cast to an interface reference?

    An object reference can be cast to an interface reference when the object implements the interface. This is known as interface casting. Interface casting allows an object to be treated as an instance of an interface, even if it is actually an instance of a class that implements the interface.

    class Animal {
    void eat() {
        System.out.println("eating...");
    }

    interface Pet {
        void play();
    }

    class Dog extends Animal implements Pet {
        public void play() {
            System.out.println("playing...");
        }
    }

    public class Main {
        public static void main(String[] args) {
            Dog dog = new Dog();
            Pet pet = (Pet) dog;
            pet.play();
        }
    }

    In the above example, the Dog class implements the Pet interface, so the Dog object can be cast to a Pet interface reference. This allows the Dog object to be treated as an instance of the Pet interface, even though it is actually an instance of the Dog class.


     How to make a read-only class in Java?

        To make a read-only class in Java, you can follow these steps:

        - Declare the class as final to
        prevent subclassing.
        - Declare the fields as private to
        restrict direct access.
        - Provide getter methods to access
        the fields.

        class ReadOnlyClass {
            private final int value;

            public ReadOnlyClass(int value) {
                this.value = value;
            }

            public int getValue() {
                return value;
            }
        }

        In the above example, the ReadOnlyClass is declared as final to prevent subclassing. The value field is declared as private to restrict direct access. The getValue() method is provided to access the value field. This makes the ReadOnlyClass read-only, as the value field can only be accessed through the getValue() method.

        How to make a write-only class in Java?

        To make a write-only class in Java, you can follow these steps:

        - Declare the class as final to prevent subclassing.
        - Declare the fields as private to restrict direct access.
        - Provide setter methods to modify the fields.

        class WriteOnlyClass {
            private int value;

            public WriteOnlyClass() {
            }

            public void setValue(int value) {
                this.value = value;
            }
        }

        In the above example, the WriteOnlyClass is declared
        as final to prevent subclassing. The value field is declared as private to restrict direct access. The setValue() method is provided to modify the value field. This makes the WriteOnlyClass write-only, as the value field can only be modified through the setValue() method.





